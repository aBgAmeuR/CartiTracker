"use strict";exports.id=713,exports.ids=[713],exports.modules={52713:(e,t,a)=>{a.r(t),a.d(t,{DsdiffContentParseError:()=>u,DsdiffParser:()=>l});var n=a(68032),i=a(76911),s=a(48224),r=a(57094),o=a(66367),h=a(28959);let k={len:12,get:(e,t)=>({chunkID:r.e.get(e,t),chunkSize:n.INT64_BE.get(e,t+4)})};var m=a(81347);let d=i("music-metadata:parser:aiff");class u extends(0,m.fO)("DSDIFF"){}class l extends o.s{async parse(){let e=await this.tokenizer.readToken(k);if("FRM8"!==e.chunkID)throw new u("Unexpected chunk-ID");let t=(await this.tokenizer.readToken(r.e)).trim();if("DSD"===t)return this.metadata.setFormat("container",`DSDIFF/${t}`),this.metadata.setFormat("lossless",!0),this.readFmt8Chunks(e.chunkSize-BigInt(r.e.len));throw new u(`Unsupported DSDIFF type: ${t}`)}async readFmt8Chunks(e){for(;e>=k.len;){let t=await this.tokenizer.readToken(k);d(`Chunk id=${t.chunkID}`),await this.readData(t),e-=BigInt(k.len)+t.chunkSize}}async readData(e){d(`Reading data of chunk[ID=${e.chunkID}, size=${e.chunkSize}]`);let t=this.tokenizer.position;switch(e.chunkID.trim()){case"FVER":{let e=await this.tokenizer.readToken(n.UINT32_LE);d(`DSDIFF version=${e}`);break}case"PROP":if("SND "!==await this.tokenizer.readToken(r.e))throw new u("Unexpected PROP-chunk ID");await this.handleSoundPropertyChunks(e.chunkSize-BigInt(r.e.len));break;case"ID3":{let t=await this.tokenizer.readToken(new n.Uint8ArrayType(Number(e.chunkSize))),a=s.vY(t);await new h.S().parse(this.metadata,a,this.options);break}case"DSD":this.metadata.format.numberOfChannels&&this.metadata.setFormat("numberOfSamples",Number(e.chunkSize*BigInt(8)/BigInt(this.metadata.format.numberOfChannels))),this.metadata.format.numberOfSamples&&this.metadata.format.sampleRate&&this.metadata.setFormat("duration",this.metadata.format.numberOfSamples/this.metadata.format.sampleRate);break;default:d(`Ignore chunk[ID=${e.chunkID}, size=${e.chunkSize}]`)}let a=e.chunkSize-BigInt(this.tokenizer.position-t);a>0&&(d(`After Parsing chunk, remaining ${a} bytes`),await this.tokenizer.ignore(Number(a)))}async handleSoundPropertyChunks(e){for(d(`Parsing sound-property-chunks, remainingSize=${e}`);e>0;){let t=await this.tokenizer.readToken(k);d(`Sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`);let a=this.tokenizer.position;switch(t.chunkID.trim()){case"FS":{let e=await this.tokenizer.readToken(n.UINT32_BE);this.metadata.setFormat("sampleRate",e);break}case"CHNL":{let e=await this.tokenizer.readToken(n.UINT16_BE);this.metadata.setFormat("numberOfChannels",e),await this.handleChannelChunks(t.chunkSize-BigInt(n.UINT16_BE.len));break}case"CMPR":{let e=(await this.tokenizer.readToken(r.e)).trim(),t=await this.tokenizer.readToken(n.UINT8),a=await this.tokenizer.readToken(new n.StringType(t,"ascii"));"DSD"===e&&(this.metadata.setFormat("lossless",!0),this.metadata.setFormat("bitsPerSample",1)),this.metadata.setFormat("codec",`${e} (${a})`);break}case"ABSS":{let e=await this.tokenizer.readToken(n.UINT16_BE),t=await this.tokenizer.readToken(n.UINT8),a=await this.tokenizer.readToken(n.UINT8),i=await this.tokenizer.readToken(n.UINT32_BE);d(`ABSS ${e}:${t}:${a}.${i}`);break}case"LSCO":{let e=await this.tokenizer.readToken(n.UINT16_BE);d(`LSCO lsConfig=${e}`);break}default:d(`Unknown sound-property-chunk[ID=${t.chunkID}, size=${t.chunkSize}]`),await this.tokenizer.ignore(Number(t.chunkSize))}let i=t.chunkSize-BigInt(this.tokenizer.position-a);i>0&&(d(`After Parsing sound-property-chunk ${t.chunkSize}, remaining ${i} bytes`),await this.tokenizer.ignore(Number(i))),e-=BigInt(k.len)+t.chunkSize,d(`Parsing sound-property-chunks, remainingSize=${e}`)}if(this.metadata.format.lossless&&this.metadata.format.sampleRate&&this.metadata.format.numberOfChannels&&this.metadata.format.bitsPerSample){let e=this.metadata.format.sampleRate*this.metadata.format.numberOfChannels*this.metadata.format.bitsPerSample;this.metadata.setFormat("bitrate",e)}}async handleChannelChunks(e){d(`Parsing channel-chunks, remainingSize=${e}`);let t=[];for(;e>=r.e.len;){let a=await this.tokenizer.readToken(r.e);d(`Channel[ID=${a}]`),t.push(a),e-=BigInt(r.e.len)}return d(`Channels: ${t.join(", ")}`),t}}}};